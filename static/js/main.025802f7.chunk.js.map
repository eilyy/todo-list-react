{"version":3,"sources":["components/context/todo-service-context.js","components/hoc/with-todo-service.js","components/task-item/task-item.js","redux/actions/actions.js","components/tasks-list/tasks-list.js","components/app-header/app-header.js","components/contacts/contacts.js","components/new-task-form/new-task-form.js","components/filter/filter.js","components/app/app.js","reportWebVitals.js","services/TodoService.js","redux/reducer/reducer.js","store/store.js","index.js"],"names":["TodoServiceContext","React","createContext","undefined","withTodoService","Wrapped","props","Consumer","TodoService","mapDispatchToProps","taskDeleted","taskId","type","payload","taskUpdated","data","connect","state","tasks","loading","error","theme","item","name","done","fav","id","onDelete","a","deleteTask","onFav","updateTask","onDone","className","onClick","icon","faCheck","faStar","faTrashAlt","tasksLoaded","newTasks","tasksRequested","tasksError","TasksList","document","title","this","loadTasks","prevProps","prevState","snapshot","favFilter","getTasks","then","res","filter","catch","err","items","map","Component","AppHeader","lang","localStorage","langSwitched","themeSwitched","to","onThemeSwitch","GB","onLangSwitch","RU","useEffect","Container","target","href","rel","faEnvelope","faTelegramPlane","faInstagram","faChevronLeft","taskPosted","createdTask","onPost","e","preventDefault","input","querySelector","value","newTask","postTask","onSubmit","placeholder","autoComplete","Button","BlueSwitch","withStyles","switchBase","color","border","backgroundColor","checked","track","Switch","filterSwitched","onChange","evt","exact","path","component","Contacts","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","_url","url","fetch","ok","Error","status","json","task","method","headers","body","JSON","stringify","getResource","initialState","reducer","action","i","findIndex","slice","index","store","createStore","todoService","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.025802f7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodoServiceContext = React.createContext(undefined);\n\nexport default TodoServiceContext;","import React from 'react';\nimport TodoServiceContext from \"../context/todo-service-context\";\n\nconst withTodoService = () => (Wrapped) => {\n    return (props) => {\n        return (\n            <TodoServiceContext.Consumer>\n                {\n                    (TodoService) => {\n                        return <Wrapped {...props} TodoService={TodoService} />\n                    }\n                }\n            </TodoServiceContext.Consumer>\n        )\n    }\n};\n\nexport default withTodoService;","import React from \"react\";\nimport withTodoService from \"../hoc/with-todo-service\";\nimport {connect} from \"react-redux\";\nimport {taskDeleted, taskUpdated} from \"../../redux/actions/actions\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faStar, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport \"./task-item.scss\"\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        loading: state.loading,\n        error: state.error,\n        theme: state.theme\n    }\n}\n\nconst mapDispatchToProps = {\n    taskDeleted,\n    taskUpdated\n}\n\nconst TaskItem = (props) => {\n    const {name, done, fav, id} = props.item;\n\n    const onDelete = async (taskId) => {\n        props.taskDeleted(taskId);\n        const {TodoService} = props;\n        await TodoService.deleteTask(taskId);\n    }\n\n    const onFav = async (taskId) => {\n        props.taskUpdated(taskId, {fav: !fav});\n        const {TodoService} = props;\n        await TodoService.updateTask(taskId, {name, done, fav: !fav});\n    }\n\n    const onDone = async (taskId) => {\n        props.taskUpdated(taskId, {done: !done});\n        const {TodoService} = props;\n        await TodoService.updateTask(taskId, {name, fav, done: !done});\n    }\n\n    return (\n        <section className={ \"task-item \" + (fav ? \"task-item_fav \" : \"\") + (props.theme === 'Dark' ? \"task-item_dark\" : \"\") }>\n            <div className=\"task-item__info\">\n                <div className=\"task-item__checkbox\" onClick={() => onDone(id)}>\n                    <FontAwesomeIcon className={done ? \"task-item__icon task-item__icon-check\" : \"task-item__icon task-item__icon_hidden\"} icon={faCheck}/>\n                </div>\n                <div className=\"task-item__text-wrapper\">\n                    <span className={done ? \"task-item__text task-item__text_done\" : \"task-item__text\"} onClick={() => onDone(id)}>{name}</span>\n                </div>\n            </div>\n            <div className=\"task-item__options\">\n                <div className=\"task-item__icon-wrapper\">\n                    <FontAwesomeIcon className={fav ? \"task-item__icon task-item__icon-fav\" : \"task-item__icon\"} icon={faStar} onClick={() => onFav(id)}/>\n                </div>\n                <div className=\"task-item__icon-wrapper\">\n                    <FontAwesomeIcon className=\"task-item__icon task-item__icon-delete\" icon={faTrashAlt} onClick={() => onDelete(id)}/>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default withTodoService()(connect(mapStateToProps, mapDispatchToProps)(TaskItem));","const tasksLoaded = (newTasks) => {\n    return {\n        type: 'TASKS_LOADED',\n        payload: newTasks\n    }\n}\n\nconst tasksRequested = () => {\n    return {\n        type: 'TASKS_REQUESTED'\n    }\n}\n\nconst tasksError = () => {\n    return {\n        type: 'TASKS_ERROR'\n    }\n}\n\nconst taskPosted = (createdTask) => {\n    return {\n        type: 'TASK_POSTED',\n        payload: createdTask\n    }\n}\n\nconst taskDeleted = (taskId) => {\n    return {\n        type: 'TASK_DELETED',\n        payload: taskId\n    }\n}\n\nconst taskUpdated = (taskId, data) => {\n    return {\n        type: 'TASK_UPDATED',\n        payload: {\n            taskId,\n            data\n        }\n    }\n}\n\nconst langSwitched = (lang) => {\n    return {\n        type: 'LANG_SWITCHED',\n        payload: lang\n    }\n}\n\nconst filterSwitched = (filter) => {\n    return {\n        type: 'FILTER_SWITCHED',\n        payload: filter\n    }\n}\n\nconst themeSwitched = (theme) => {\n    return {\n        type: 'THEME_SWITCHED',\n        payload: theme\n    }\n}\n\nexport {\n    tasksRequested,\n    tasksLoaded,\n    tasksError,\n    taskPosted,\n    taskDeleted,\n    taskUpdated,\n    langSwitched,\n    filterSwitched,\n    themeSwitched\n}","import React, {Component} from \"react\";\nimport TaskItem from \"../task-item/task-item\";\nimport withTodoService from \"../hoc/with-todo-service\";\nimport {connect} from \"react-redux\";\nimport {tasksLoaded, tasksRequested, tasksError} from \"../../redux/actions/actions\";\n\nimport \"./tasks-list.scss\"\n\nconst mapStateToProps = (state) => {\n    return {\n        tasks: state.tasks,\n        loading: state.loading,\n        error: state.error,\n        favFilter: state.favFilter\n    }\n}\n\nconst mapDispatchToProps = {\n    tasksLoaded,\n    tasksRequested,\n    tasksError\n}\n\nclass TasksList extends Component {\n    componentDidMount() {\n        document.title = \"tododo\";\n        this.loadTasks();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.favFilter !== this.props.favFilter) {\n            this.loadTasks();\n        }\n    }\n\n    loadTasks() {\n        this.props.tasksRequested();\n        const {TodoService} = this.props;\n        if(this.props.favFilter) {\n            TodoService.getTasks()\n                .then(res => this.props.tasksLoaded(res.filter(item => item.fav)))\n                .catch(err => this.props.tasksError());\n        } else {\n            TodoService.getTasks()\n                .then(res => this.props.tasksLoaded(res))\n                .catch(err => this.props.tasksError());\n        }\n    }\n\n    render() {\n        const {tasks} = this.props;\n        const items = tasks.map(item => {\n            return (\n                <TaskItem key={item.id} item={item} onDelete={this.onDelete}/>\n            );\n        })\n        return (\n        <div className=\"tasks-list\">\n            {items}\n        </div>\n        )\n    }\n}\n\nexport default withTodoService()(connect(mapStateToProps, mapDispatchToProps)(TasksList));","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {langSwitched, themeSwitched} from \"../../redux/actions/actions\";\n\nimport Flags from \"country-flag-icons/react/1x1\";\nimport \"./app-header.scss\"\n\nclass AppHeader extends Component {\n    onLangSwitch () {\n        if(this.props.lang === 'English') {\n            localStorage['lang'] = 'Russian';\n        } else {\n            localStorage['lang'] = 'English';\n        }\n        this.props.langSwitched(localStorage['lang']);\n    }\n\n    onThemeSwitch () {\n        if(this.props.theme === 'Light') {\n            localStorage['theme'] = 'Dark';\n        } else {\n            localStorage['theme'] = 'Light';\n        }\n        this.props.themeSwitched(localStorage['theme']);\n    }\n\n    componentDidMount() {\n        this.props.langSwitched(localStorage['lang']);\n        this.props.themeSwitched(localStorage['theme']);\n    }\n\n    render() {\n        return (\n            <header className={this.props.theme === 'Light' ? \"app-header\" : \"app-header app-header_dark\"}>\n                <div className=\"container app-header__wrapper\">\n                    <nav className=\"app-header__nav\">\n                        <Link className=\"app-header__nav-item app-header__nav-item_logo\" to=\"/\">{this.props.lang === 'English' ? 'tododo' : 'тудуду'}</Link>\n                        <Link className=\"app-header__nav-item\" to=\"/contacts\">{this.props.lang === 'English' ? 'Contacts' : 'Контакты'}</Link>\n                    </nav>\n                    <div className=\"app-header__tools\">\n                        <div className={this.props.theme === 'Light' ? \"app-header__tools-item tool\" : \"app-header__tools-item tool tool_dark\"}>\n                            <div title={this.props.lang === 'English' ? 'Change Theme' : 'Сменить Тему'} onClick={() => this.onThemeSwitch()} className=\"tool__theme\">\n                                <div className=\"tool__theme-switch\"/>\n                            </div>\n                        </div>\n                        <div className={this.props.theme === 'Light' ? \"app-header__tools-item tool\" : \"app-header__tools-item tool tool_dark\"}>\n                            <Flags.GB title={this.props.lang === 'English' ? 'Change Language' : 'Сменить Язык'}\n                                      className={this.props.lang === 'English' ? \"tool__flag tool__flag-gb\" : \"tool__flag tool__flag-gb tool__flag-hidden\"}\n                                      onClick={() => this.onLangSwitch()}/>\n                            <Flags.RU title={this.props.lang === 'English' ? 'Change Language' : 'Сменить Язык'}\n                                      className={this.props.lang === 'Russian' ? \"tool__flag tool__flag-ru\" : \"tool__flag tool__flag-ru tool__flag-hidden\"}\n                                      onClick={() => this.onLangSwitch()}/>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        lang: state.lang,\n        theme: state.theme\n    }\n}\n\nconst mapDispatchToProps = {\n    langSwitched,\n    themeSwitched\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppHeader);","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\n\nimport {Container} from \"reactstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTelegramPlane, faInstagram} from \"@fortawesome/free-brands-svg-icons\";\nimport {faEnvelope} from \"@fortawesome/free-regular-svg-icons\";\nimport {faChevronLeft} from \"@fortawesome/free-solid-svg-icons\"\nimport \"./contacts.scss\";\n\nconst Contacts = (props) => {\n    useEffect(() => {\n        if(props.lang === 'English')\n            document.title = \"tododo - Contacts\";\n        else\n            document.title = \"tododo - Контакты\";\n    })\n    return (\n        <Container className={props.theme === 'Light' ? \"contacts\" : \"contacts contacts_dark\"}>\n            <h1 className=\"contacts__text\">{props.lang === 'English' ? \"Hit me up ;)\" : \"Напишите мне ;)\"}</h1>\n            <div className=\"contacts__icons\">\n                <div className=\"contacts__icon-wrapper\">\n                    <a target=\"_blank\" href=\"mailto: ilyaevdokkimov@gmail.com\" rel=\"noreferrer\">\n                        <FontAwesomeIcon className=\"contacts__icon\" icon={faEnvelope}/>\n                    </a>\n                </div>\n                <div className=\"contacts__icon-wrapper\">\n                    <a target=\"_blank\" href=\"https://t.me/whereismybeemer/\" rel=\"noreferrer\">\n                        <FontAwesomeIcon className=\"contacts__icon\" icon={faTelegramPlane}/>\n                    </a>\n                </div>\n                <div className=\"contacts__icon-wrapper\">\n                    <a target=\"_blank\" href=\"https://instagram.com/whereismybeemer/\" rel=\"noreferrer\">\n                        <FontAwesomeIcon className=\"contacts__icon\" icon={faInstagram}/>\n                    </a>\n                </div>\n            </div>\n            <Link className=\"contacts__back-btn\" to=\"/\">\n                <div className=\"contacts__back-icon-wrapper\">\n                    <FontAwesomeIcon className=\"contacts__back-icon\" icon={faChevronLeft}/>\n                </div>\n                {props.lang === 'English' ? \"back to\" : \"назад к\"}<span className=\"contacts__tododo\">tododo</span>\n            </Link>\n        </Container>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        lang: state.lang,\n        theme: state.theme\n    }\n}\n\nexport default connect(mapStateToProps)(Contacts);","import React from \"react\";\nimport withTodoService from \"../hoc/with-todo-service\";\nimport {connect} from \"react-redux\";\nimport {taskPosted} from \"../../redux/actions/actions\";\n\nimport {Button} from \"reactstrap\";\nimport \"./new-task-form.scss\"\n\nconst mapStateToProps = (state) => {\n    return {\n        lang: state.lang,\n        theme: state.theme\n    }\n}\n\nconst mapDispatchToProps = {\n    taskPosted\n}\n\nconst NewTaskForm = (props) => {\n    const onPost = async (e) => {\n        e.preventDefault();\n        const input = document.querySelector('#new-task-input');\n        if(input.value !== '') {\n            const newTask = {\n                name: input.value,\n                done: false,\n                fav: false\n            };\n            const id = await props.TodoService.postTask(newTask).then(res => res.id);\n            props.taskPosted({...newTask, id});\n        }\n        input.value = '';\n    }\n\n    return (\n        <form className={props.theme === 'Light' ? \"new-task\" : \"new-task new-task_dark\"} onSubmit={onPost}>\n            <input type=\"text\" id=\"new-task-input\" className=\"new-task__input\" placeholder={props.lang === 'English' ? 'Enter a new task' : 'Введите новую задачу'} autoComplete=\"off\"/>\n            <Button id=\"new-task-btn\" className=\"new-task__btn\">{props.lang === 'English' ? 'Create' : 'Создать'}</Button>\n        </form>\n    )\n}\n\nexport default withTodoService()(connect(mapStateToProps, mapDispatchToProps)(NewTaskForm));","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {filterSwitched} from \"../../redux/actions/actions\";\n\nimport {Switch, withStyles} from \"@material-ui/core\";\nimport \"./filter.scss\"\n\nconst BlueSwitch = withStyles({\n    switchBase: {\n        color: \"#9a9a9a\",\n        border: \"#0d6efd\",\n        '&:hover': {\n            backgroundColor: 'rgba(124,124,124,0.1)',\n        },\n        '&$checked': {\n            color: \"#3285ff\",\n            '&:hover': {\n                backgroundColor: 'rgba(13, 110, 253, 0.1)',\n            }\n        },\n        '&$checked + $track': {\n            backgroundColor: \"#0d6efd\",\n        },\n    },\n    checked: {},\n    track: {\n        backgroundColor: \"grey\"\n    }\n})(Switch);\n\nconst Filter = (props) => {\n    const onFilter = (evt) => {\n        props.filterSwitched(evt.target.checked);\n    }\n\n    return (\n        <div className=\"filter\">\n            {props.lang === 'English' ? 'all' : 'все'}\n            <BlueSwitch onChange={onFilter}/>\n            {props.lang === 'English' ? 'fav' : 'изб'}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        lang: state.lang\n    }\n}\n\nconst mapDispatchToProps = {\n    filterSwitched\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {Route} from \"react-router-dom\";\n\nimport TasksList from \"../tasks-list/tasks-list\";\nimport AppHeader from \"../app-header/app-header\";\nimport Contacts from \"../contacts/contacts\";\nimport NewTaskForm from \"../new-task-form/new-task-form\";\nimport Filter from \"../filter/filter\";\n\nimport './app.scss';\nimport {Container} from \"reactstrap\";\n\nconst App = (props) => {\n    useEffect(() => {\n        if (localStorage['lang'] === undefined) {\n            localStorage['lang'] = 'English';\n        }\n        if (localStorage['theme'] === undefined) {\n            localStorage['theme'] = 'Light';\n        }\n    }, [])\n\n    return (\n        <div className={props.theme === 'Light' ? \"app\" : \"app app_dark\"}>\n            <AppHeader/>\n            <Route exact path=\"/\">\n                <Container>\n                    <NewTaskForm/>\n                    <Filter/>\n                    <TasksList/>\n                </Container>\n            </Route>\n            <Route path=\"/contacts\" component={Contacts} title=\"Contacts\"/>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        theme: state.theme\n    }\n}\n\nexport default connect(mapStateToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default class TodoService {\n    constructor() {\n        this._url = \"http://localhost:3000\"\n    }\n\n    async getResource(url) {\n        const res = await fetch(`${this._url}/${url}`);\n\n        if(!res.ok) {\n            throw new Error(`Unable to fetch ${this._url}/${url} with status ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    async postTask(task) {\n        const res = await fetch(`${this._url}/tasks`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(task)\n        });\n\n        if(!res.ok) {\n            throw new Error(`Unable to post to ${this._url}/tasks with status ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    async deleteTask(taskId) {\n        const res = await fetch(`${this._url}/tasks/${taskId}`, {method: 'DELETE'});\n\n        if(!res.ok) {\n            throw new Error(`Unable to delete ${this._url}/tasks/${taskId} with status ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    async updateTask(taskId, data) {\n        const res = await fetch(`${this._url}/tasks/${taskId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n\n        if(!res.ok) {\n            throw new Error(`Unable to update ${this._url}/tasks/${taskId} with status ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    async getTasks() {\n        return await this.getResource('tasks')\n    }\n}","const initialState = {\n    tasks: [],\n    loading: true,\n    error: false,\n    lang: '',\n    favFilter: false,\n    theme: ''\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'TASKS_LOADED':\n            return {\n                ...state,\n                tasks: action.payload,\n                loading: false\n            };\n        case 'TASKS_REQUESTED':\n            return {\n                ...state,\n                tasks: state.tasks,\n                loading: true,\n                error: false\n            };\n        case 'TASKS_ERROR':\n            return {\n                ...state,\n                tasks: state.tasks,\n                loading: false,\n                error: true\n            };\n        case 'TASK_POSTED':\n            return {\n                ...state,\n                tasks: [...state.tasks, action.payload]\n            }\n        case 'TASK_DELETED':\n            const i = state.tasks.findIndex(task => task.id === action.payload);\n            return {\n                ...state,\n                tasks: [...state.tasks.slice(0, i), ...state.tasks.slice(i + 1)]\n            }\n        case 'TASK_UPDATED':\n            const index = state.tasks.findIndex(task => task.id === action.payload.taskId);\n            return {\n                ...state,\n                tasks: [...state.tasks.slice(0, index),\n                    {...state.tasks[index], ...action.payload.data},\n                    ...state.tasks.slice(index + 1)]\n            }\n        case 'LANG_SWITCHED':\n            return {\n                ...state,\n                lang: action.payload\n            };\n        case 'FILTER_SWITCHED':\n            return {\n                ...state,\n                favFilter: action.payload\n            };\n        case 'THEME_SWITCHED':\n            return {\n                ...state,\n                theme: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import {createStore} from \"redux\";\nimport reducer from \"../redux/reducer/reducer\";\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\nimport TodoServiceContext from \"./components/context/todo-service-context\";\nimport TodoService from \"./services/TodoService\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nconst todoService = new TodoService();\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <TodoServiceContext.Provider value={todoService}>\n              <Router>\n                  <App />\n              </Router>\n          </TodoServiceContext.Provider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}